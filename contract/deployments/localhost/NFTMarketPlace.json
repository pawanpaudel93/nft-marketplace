{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "sold",
          "type": "bool"
        }
      ],
      "name": "MarketItemEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "createMarketItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "createMarketSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchItemsCreated",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct NFTMarketPlace.MarketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchMarketItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct NFTMarketPlace.MarketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchMyNFTs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct NFTMarketPlace.MarketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getListingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c9731ad3893a88baf41f1ec4912021ebb1c6afd558b63ad776d53cefd8adc0e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1661063",
    "logsBloom": "0x
    "blockHash": "0xb8d5e8ef87c575dad2200284b2c40008459cbc21b04907ec039bd658f01a454e",
    "transactionHash": "0x8c9731ad3893a88baf41f1ec4912021ebb1c6afd558b63ad776d53cefd8adc0e",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1661063",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a3af511178c920cb8a42449ea79ed983",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"name\":\"MarketItemEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createMarketItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"createMarketSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchItemsCreated\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct NFTMarketPlace.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchMarketItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct NFTMarketPlace.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchMyNFTs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct NFTMarketPlace.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTMarketPlace.sol\":\"NFTMarketPlace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFTMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract NFTMarketPlace is ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _itemIds;\\n    Counters.Counter private _itemsSold;\\n\\n    address payable internal owner;\\n    uint256 internal listingPrice = 0.025 ether;\\n\\n    constructor() {\\n        owner = payable(msg.sender);\\n    }\\n\\n    struct MarketItem {\\n        uint256 itemId;\\n        address nftContract;\\n        uint256 tokenId;\\n        address payable seller;\\n        address payable owner;\\n        uint256 price;\\n        bool sold;\\n    }\\n\\n    mapping(uint256 => MarketItem) private idToMarketItem;\\n\\n    event MarketItemEvent(\\n        uint256 indexed itemId,\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address seller,\\n        address owner,\\n        uint256 price,\\n        bool sold\\n    );\\n\\n    function getListingPrice() public view returns (uint256) {\\n        return listingPrice;\\n    }\\n\\n    function createMarketItem(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 price\\n    ) public payable nonReentrant {\\n        require(price > 0, \\\"Price must be atleast 1 wei\\\");\\n        require(\\n            msg.value == listingPrice,\\n            \\\"Price must be equal to listing price\\\"\\n        );\\n\\n        _itemIds.increment();\\n        uint256 itemId = _itemIds.current();\\n        idToMarketItem[itemId] = MarketItem(\\n            itemId,\\n            nftContract,\\n            tokenId,\\n            payable(msg.sender),\\n            payable(address(0)),\\n            price,\\n            false\\n        );\\n        IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);\\n        emit MarketItemEvent(\\n            itemId,\\n            nftContract,\\n            tokenId,\\n            msg.sender,\\n            address(0),\\n            price,\\n            false\\n        );\\n    }\\n\\n    function createMarketSale(address nftContract, uint256 itemId)\\n        public\\n        payable\\n        nonReentrant\\n    {\\n        uint256 price = idToMarketItem[itemId].price;\\n        uint256 tokenId = idToMarketItem[itemId].tokenId;\\n        require(\\n            msg.value == price,\\n            \\\"Please submit the asking price in order to complete the purchase\\\"\\n        );\\n        idToMarketItem[itemId].owner = payable(msg.sender);\\n        idToMarketItem[itemId].sold = true;\\n        idToMarketItem[itemId].seller = payable(address(0));\\n        _itemsSold.increment();\\n        IERC721(nftContract).transferFrom(address(this), msg.sender, tokenId);\\n        (bool success, ) = owner.call{value: listingPrice}(\\\"\\\");\\n        require(success, \\\"Failed to send listing price to owner\\\");\\n        (success, ) = idToMarketItem[itemId].seller.call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"Failed to send paymemt to NFT owner\\\");\\n    }\\n\\n    function fetchMarketItems() public view returns (MarketItem[] memory) {\\n        uint256 itemCount = _itemIds.current();\\n        uint256 unsoldItemCount = _itemIds.current() - _itemsSold.current();\\n        uint256 currentIndex = 0;\\n\\n        MarketItem[] memory items = new MarketItem[](unsoldItemCount);\\n\\n        for (uint256 i = 0; i < itemCount; i++) {\\n            if (idToMarketItem[i + 1].owner == address(this)) {\\n                uint256 currentId = idToMarketItem[i + 1].itemId;\\n                MarketItem storage currentItem = idToMarketItem[currentId];\\n                items[currentIndex] = currentItem;\\n                currentIndex++;\\n            }\\n        }\\n        return items;\\n    }\\n\\n    function fetchMyNFTs() public view returns (MarketItem[] memory) {\\n        uint256 totalItemCount = _itemIds.current();\\n        uint256 itemCount = 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 i = 0; i < totalItemCount; i++) {\\n            if (idToMarketItem[i + 1].owner == msg.sender) {\\n                itemCount++;\\n            }\\n        }\\n\\n        MarketItem[] memory items = new MarketItem[](itemCount);\\n        for (uint256 i = 0; i < totalItemCount; i++) {\\n            if (idToMarketItem[i + 1].owner == msg.sender) {\\n                uint256 currentId = idToMarketItem[i + 1].itemId;\\n                MarketItem storage currentItem = idToMarketItem[currentId];\\n                items[currentIndex] = currentItem;\\n                currentIndex++;\\n            }\\n        }\\n        return items;\\n    }\\n\\n    function fetchItemsCreated() public view returns (MarketItem[] memory) {\\n        uint256 totalItemCount = _itemIds.current();\\n        uint256 itemCount = 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 i = 0; i < totalItemCount; i++) {\\n            if (idToMarketItem[i + 1].seller == msg.sender) {\\n                itemCount++;\\n            }\\n        }\\n\\n        MarketItem[] memory items = new MarketItem[](itemCount);\\n        for (uint256 i = 0; i < totalItemCount; i++) {\\n            if (idToMarketItem[i + 1].seller == msg.sender) {\\n                uint256 currentId = idToMarketItem[i + 1].itemId;\\n                MarketItem storage currentItem = idToMarketItem[currentId];\\n                items[currentIndex] = currentItem;\\n                currentIndex++;\\n            }\\n        }\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x114e360b09951ffa07f99fe8d3521d4165bc7d752a73e39b2a3ad0057cbad212\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526658d15e1762800060045534801561001b57600080fd5b50600160008190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611bfc806100746000396000f3fe6080604052600436106100555760003560e01c80630f08efe01461005a57806312e8558514610085578063202e3740146100b057806358eb2df5146100db578063c23b139e146100f7578063f064c32e14610113575b600080fd5b34801561006657600080fd5b5061006f61013e565b60405161007c9190611759565b60405180910390f35b34801561009157600080fd5b5061009a610468565b6040516100a7919061183b565b60405180910390f35b3480156100bc57600080fd5b506100c5610472565b6040516100d29190611759565b60405180910390f35b6100f560048036038101906100f09190611417565b610820565b005b610111600480360381019061010c91906113db565b610b84565b005b34801561011f57600080fd5b50610128610f5e565b6040516101359190611759565b60405180910390f35b6060600061014c600161130c565b9050600061015a600261130c565b610164600161130c565b61016e9190611901565b90506000808267ffffffffffffffff8111156101b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101ec57816020015b6101d9611330565b8152602001906001900390816101d15790505b50905060005b8481101561045d573073ffffffffffffffffffffffffffffffffffffffff166005600060018461022291906118ab565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561044a5760006005600060018461028391906118ab565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff16151515158152505084868151811061042e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525084806104449061198f565b95505050505b80806104559061198f565b9150506101f2565b508094505050505090565b6000600454905090565b60606000610480600161130c565b905060008060005b83811015610528573373ffffffffffffffffffffffffffffffffffffffff16600560006001846104b891906118ab565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156105155782806105119061198f565b9350505b80806105209061198f565b915050610488565b5060008267ffffffffffffffff81111561056b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105a457816020015b610591611330565b8152602001906001900390816105895790505b50905060005b84811015610815573373ffffffffffffffffffffffffffffffffffffffff16600560006001846105da91906118ab565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108025760006005600060018461063b91906118ab565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508486815181106107e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525084806107fc9061198f565b95505050505b808061080d9061198f565b9150506105aa565b508094505050505090565b60026000541415610866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085d9061181b565b60405180910390fd5b6002600081905550600081116108b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a89061179b565b60405180910390fd5b60045434146108f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ec906117db565b60405180910390fd5b6108ff600161131a565b600061090b600161130c565b90506040518060e001604052808281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600560008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610aec939291906116dd565b600060405180830381600087803b158015610b0657600080fd5b505af1158015610b1a573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff16827f43258fe4aaafbf7edded87e399b0ff0f71ec43d24b780f129207c45832bbc886336000876000604051610b6e9493929190611714565b60405180910390a4506001600081905550505050565b60026000541415610bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc19061181b565b60405180910390fd5b6002600081905550600060056000838152602001908152602001600020600501549050600060056000848152602001908152602001600020600201549050813414610c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c41906117bb565b60405180910390fd5b336005600085815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600085815260200190815260200160002060060160006101000a81548160ff02191690831515021790555060006005600085815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d2e600261131a565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401610d6b939291906116dd565b600060405180830381600087803b158015610d8557600080fd5b505af1158015610d99573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600454604051610de7906116c8565b60006040518083038185875af1925050503d8060008114610e24576040519150601f19603f3d011682016040523d82523d6000602084013e610e29565b606091505b5050905080610e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e64906117fb565b60405180910390fd5b6005600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1634604051610ec7906116c8565b60006040518083038185875af1925050503d8060008114610f04576040519150601f19603f3d011682016040523d82523d6000602084013e610f09565b606091505b50508091505080610f4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f469061177b565b60405180910390fd5b50505060016000819055505050565b60606000610f6c600161130c565b905060008060005b83811015611014573373ffffffffffffffffffffffffffffffffffffffff1660056000600184610fa491906118ab565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611001578280610ffd9061198f565b9350505b808061100c9061198f565b915050610f74565b5060008267ffffffffffffffff811115611057577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561109057816020015b61107d611330565b8152602001906001900390816110755790505b50905060005b84811015611301573373ffffffffffffffffffffffffffffffffffffffff16600560006001846110c691906118ab565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112ee5760006005600060018461112791906118ab565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508486815181106112d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525084806112e89061198f565b95505050505b80806112f99061198f565b915050611096565b508094505050505090565b600081600001549050919050565b6001816000016000828254019250508190555050565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000813590506113c081611b98565b92915050565b6000813590506113d581611baf565b92915050565b600080604083850312156113ee57600080fd5b60006113fc858286016113b1565b925050602061140d858286016113c6565b9150509250929050565b60008060006060848603121561142c57600080fd5b600061143a868287016113b1565b935050602061144b868287016113c6565b925050604061145c868287016113c6565b9150509250925092565b6000611472838361161c565b60e08301905092915050565b61148781611947565b82525050565b61149681611935565b82525050565b6114a581611935565b82525050565b60006114b682611866565b6114c0818561187e565b93506114cb83611856565b8060005b838110156114fc5781516114e38882611466565b97506114ee83611871565b9250506001810190506114cf565b5085935050505092915050565b61151281611959565b82525050565b61152181611959565b82525050565b600061153460238361189a565b915061153f82611a07565b604082019050919050565b6000611557601b8361189a565b915061156282611a56565b602082019050919050565b600061157a60408361189a565b915061158582611a7f565b604082019050919050565b600061159d60248361189a565b91506115a882611ace565b604082019050919050565b60006115c060008361188f565b91506115cb82611b1d565b600082019050919050565b60006115e360258361189a565b91506115ee82611b20565b604082019050919050565b6000611606601f8361189a565b915061161182611b6f565b602082019050919050565b60e08201600082015161163260008501826116aa565b506020820151611645602085018261148d565b50604082015161165860408501826116aa565b50606082015161166b606085018261147e565b50608082015161167e608085018261147e565b5060a082015161169160a08501826116aa565b5060c08201516116a460c0850182611509565b50505050565b6116b381611985565b82525050565b6116c281611985565b82525050565b60006116d3826115b3565b9150819050919050565b60006060820190506116f2600083018661149c565b6116ff602083018561149c565b61170c60408301846116b9565b949350505050565b6000608082019050611729600083018761149c565b611736602083018661149c565b61174360408301856116b9565b6117506060830184611518565b95945050505050565b6000602082019050818103600083015261177381846114ab565b905092915050565b6000602082019050818103600083015261179481611527565b9050919050565b600060208201905081810360008301526117b48161154a565b9050919050565b600060208201905081810360008301526117d48161156d565b9050919050565b600060208201905081810360008301526117f481611590565b9050919050565b60006020820190508181036000830152611814816115d6565b9050919050565b60006020820190508181036000830152611834816115f9565b9050919050565b600060208201905061185060008301846116b9565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006118b682611985565b91506118c183611985565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118f6576118f56119d8565b5b828201905092915050565b600061190c82611985565b915061191783611985565b92508282101561192a576119296119d8565b5b828203905092915050565b600061194082611965565b9050919050565b600061195282611965565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061199a82611985565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156119cd576119cc6119d8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4661696c656420746f2073656e64207061796d656d7420746f204e4654206f7760008201527f6e65720000000000000000000000000000000000000000000000000000000000602082015250565b7f5072696365206d7573742062652061746c656173742031207765690000000000600082015250565b7f506c65617365207375626d6974207468652061736b696e67207072696365206960008201527f6e206f7264657220746f20636f6d706c65746520746865207075726368617365602082015250565b7f5072696365206d75737420626520657175616c20746f206c697374696e67207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4661696c656420746f2073656e64206c697374696e6720707269636520746f2060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b611ba181611935565b8114611bac57600080fd5b50565b611bb881611985565b8114611bc357600080fd5b5056fea264697066735822122060356c3348a1d95178b217694d2f401a396e72c9f5a27aeb99494f1e46187a1e64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c80630f08efe01461005a57806312e8558514610085578063202e3740146100b057806358eb2df5146100db578063c23b139e146100f7578063f064c32e14610113575b600080fd5b34801561006657600080fd5b5061006f61013e565b60405161007c9190611759565b60405180910390f35b34801561009157600080fd5b5061009a610468565b6040516100a7919061183b565b60405180910390f35b3480156100bc57600080fd5b506100c5610472565b6040516100d29190611759565b60405180910390f35b6100f560048036038101906100f09190611417565b610820565b005b610111600480360381019061010c91906113db565b610b84565b005b34801561011f57600080fd5b50610128610f5e565b6040516101359190611759565b60405180910390f35b6060600061014c600161130c565b9050600061015a600261130c565b610164600161130c565b61016e9190611901565b90506000808267ffffffffffffffff8111156101b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101ec57816020015b6101d9611330565b8152602001906001900390816101d15790505b50905060005b8481101561045d573073ffffffffffffffffffffffffffffffffffffffff166005600060018461022291906118ab565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561044a5760006005600060018461028391906118ab565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff16151515158152505084868151811061042e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525084806104449061198f565b95505050505b80806104559061198f565b9150506101f2565b508094505050505090565b6000600454905090565b60606000610480600161130c565b905060008060005b83811015610528573373ffffffffffffffffffffffffffffffffffffffff16600560006001846104b891906118ab565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156105155782806105119061198f565b9350505b80806105209061198f565b915050610488565b5060008267ffffffffffffffff81111561056b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105a457816020015b610591611330565b8152602001906001900390816105895790505b50905060005b84811015610815573373ffffffffffffffffffffffffffffffffffffffff16600560006001846105da91906118ab565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108025760006005600060018461063b91906118ab565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508486815181106107e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525084806107fc9061198f565b95505050505b808061080d9061198f565b9150506105aa565b508094505050505090565b60026000541415610866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085d9061181b565b60405180910390fd5b6002600081905550600081116108b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a89061179b565b60405180910390fd5b60045434146108f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ec906117db565b60405180910390fd5b6108ff600161131a565b600061090b600161130c565b90506040518060e001604052808281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600560008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610aec939291906116dd565b600060405180830381600087803b158015610b0657600080fd5b505af1158015610b1a573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff16827f43258fe4aaafbf7edded87e399b0ff0f71ec43d24b780f129207c45832bbc886336000876000604051610b6e9493929190611714565b60405180910390a4506001600081905550505050565b60026000541415610bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc19061181b565b60405180910390fd5b6002600081905550600060056000838152602001908152602001600020600501549050600060056000848152602001908152602001600020600201549050813414610c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c41906117bb565b60405180910390fd5b336005600085815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600085815260200190815260200160002060060160006101000a81548160ff02191690831515021790555060006005600085815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d2e600261131a565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401610d6b939291906116dd565b600060405180830381600087803b158015610d8557600080fd5b505af1158015610d99573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600454604051610de7906116c8565b60006040518083038185875af1925050503d8060008114610e24576040519150601f19603f3d011682016040523d82523d6000602084013e610e29565b606091505b5050905080610e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e64906117fb565b60405180910390fd5b6005600085815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1634604051610ec7906116c8565b60006040518083038185875af1925050503d8060008114610f04576040519150601f19603f3d011682016040523d82523d6000602084013e610f09565b606091505b50508091505080610f4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f469061177b565b60405180910390fd5b50505060016000819055505050565b60606000610f6c600161130c565b905060008060005b83811015611014573373ffffffffffffffffffffffffffffffffffffffff1660056000600184610fa491906118ab565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611001578280610ffd9061198f565b9350505b808061100c9061198f565b915050610f74565b5060008267ffffffffffffffff811115611057577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561109057816020015b61107d611330565b8152602001906001900390816110755790505b50905060005b84811015611301573373ffffffffffffffffffffffffffffffffffffffff16600560006001846110c691906118ab565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112ee5760006005600060018461112791906118ab565b81526020019081526020016000206000015490506000600560008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508486815181106112d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525084806112e89061198f565b95505050505b80806112f99061198f565b915050611096565b508094505050505090565b600081600001549050919050565b6001816000016000828254019250508190555050565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6000813590506113c081611b98565b92915050565b6000813590506113d581611baf565b92915050565b600080604083850312156113ee57600080fd5b60006113fc858286016113b1565b925050602061140d858286016113c6565b9150509250929050565b60008060006060848603121561142c57600080fd5b600061143a868287016113b1565b935050602061144b868287016113c6565b925050604061145c868287016113c6565b9150509250925092565b6000611472838361161c565b60e08301905092915050565b61148781611947565b82525050565b61149681611935565b82525050565b6114a581611935565b82525050565b60006114b682611866565b6114c0818561187e565b93506114cb83611856565b8060005b838110156114fc5781516114e38882611466565b97506114ee83611871565b9250506001810190506114cf565b5085935050505092915050565b61151281611959565b82525050565b61152181611959565b82525050565b600061153460238361189a565b915061153f82611a07565b604082019050919050565b6000611557601b8361189a565b915061156282611a56565b602082019050919050565b600061157a60408361189a565b915061158582611a7f565b604082019050919050565b600061159d60248361189a565b91506115a882611ace565b604082019050919050565b60006115c060008361188f565b91506115cb82611b1d565b600082019050919050565b60006115e360258361189a565b91506115ee82611b20565b604082019050919050565b6000611606601f8361189a565b915061161182611b6f565b602082019050919050565b60e08201600082015161163260008501826116aa565b506020820151611645602085018261148d565b50604082015161165860408501826116aa565b50606082015161166b606085018261147e565b50608082015161167e608085018261147e565b5060a082015161169160a08501826116aa565b5060c08201516116a460c0850182611509565b50505050565b6116b381611985565b82525050565b6116c281611985565b82525050565b60006116d3826115b3565b9150819050919050565b60006060820190506116f2600083018661149c565b6116ff602083018561149c565b61170c60408301846116b9565b949350505050565b6000608082019050611729600083018761149c565b611736602083018661149c565b61174360408301856116b9565b6117506060830184611518565b95945050505050565b6000602082019050818103600083015261177381846114ab565b905092915050565b6000602082019050818103600083015261179481611527565b9050919050565b600060208201905081810360008301526117b48161154a565b9050919050565b600060208201905081810360008301526117d48161156d565b9050919050565b600060208201905081810360008301526117f481611590565b9050919050565b60006020820190508181036000830152611814816115d6565b9050919050565b60006020820190508181036000830152611834816115f9565b9050919050565b600060208201905061185060008301846116b9565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006118b682611985565b91506118c183611985565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118f6576118f56119d8565b5b828201905092915050565b600061190c82611985565b915061191783611985565b92508282101561192a576119296119d8565b5b828203905092915050565b600061194082611965565b9050919050565b600061195282611965565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061199a82611985565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156119cd576119cc6119d8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4661696c656420746f2073656e64207061796d656d7420746f204e4654206f7760008201527f6e65720000000000000000000000000000000000000000000000000000000000602082015250565b7f5072696365206d7573742062652061746c656173742031207765690000000000600082015250565b7f506c65617365207375626d6974207468652061736b696e67207072696365206960008201527f6e206f7264657220746f20636f6d706c65746520746865207075726368617365602082015250565b7f5072696365206d75737420626520657175616c20746f206c697374696e67207060008201527f7269636500000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4661696c656420746f2073656e64206c697374696e6720707269636520746f2060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b611ba181611935565b8114611bac57600080fd5b50565b611bb881611985565b8114611bc357600080fd5b5056fea264697066735822122060356c3348a1d95178b217694d2f401a396e72c9f5a27aeb99494f1e46187a1e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1906,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "_itemIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)1517_storage"
      },
      {
        "astId": 1909,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "_itemsSold",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1517_storage"
      },
      {
        "astId": 1911,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 1914,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "listingPrice",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1946,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "idToMarketItem",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(MarketItem)1941_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(MarketItem)1941_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTMarketPlace.MarketItem)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketItem)1941_storage"
      },
      "t_struct(Counter)1517_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1516,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MarketItem)1941_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketPlace.MarketItem",
        "members": [
          {
            "astId": 1928,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "itemId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1930,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "nftContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1932,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1934,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 1936,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address_payable"
          },
          {
            "astId": 1938,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1940,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "sold",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}